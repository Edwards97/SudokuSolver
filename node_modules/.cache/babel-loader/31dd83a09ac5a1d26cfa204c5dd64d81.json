{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Steven\\\\Desktop\\\\Workplace\\\\sudoku\\\\sudoku\\\\src\\\\Tabs\\\\home.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport '../App.css';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.resetTest = () => {\n      /*let test = [[3,5,9,    8,0,0,   0,0,0],\r\n                  [0,0,0,    0,4,0,   0,0,0],\r\n                  [0,0,0,    0,0,0,   0,7,9],\r\n      \r\n                  [0,6,0,    4,0,0,   0,0,0],\r\n                  [0,0,0,    0,0,0,   0,0,8],\r\n                  [0,3,0,    2,6,0,   0,0,0],\r\n                    [0,0,8,    3,0,9,   2,0,7],\r\n                  [0,0,0,    0,0,8,   5,0,0],\r\n                  [0,0,1,    0,0,0,   6,0,0]];*/\n      let test = [[0, 9, 0, 4, 7, 0, 0, 0, 0], [0, 0, 3, 0, 5, 0, 0, 0, 7], [0, 5, 1, 0, 0, 6, 0, 0, 0], [0, 0, 0, 9, 8, 3, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2, 6], [3, 0, 0, 0, 0, 0, 0, 7, 0], [0, 0, 6, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 0, 5, 9, 0, 0], [0, 0, 0, 3, 0, 1, 5, 0, 0]];\n      this.setState({\n        cycleCount: 0\n      }); //this.state.cycleCount = 0;\n\n      let newMap = test;\n      this.setState({\n        map: newMap\n      });\n      console.log(newMap);\n    };\n\n    this.handleInput = (event, index1, index2) => {\n      if (isNaN(event.target.value)) {\n        alert(\"Sudoku only uses numbers\");\n      } else {\n        let newMap = this.state.map.slice();\n        newMap[index1][index2] = Number(event.target.value);\n        this.setState({\n          map: newMap\n        });\n        this.printMap();\n      }\n    };\n\n    this.isfinished = newMap => {\n      //returns true if puzzle is finished, else false... ie checks for any values of 0 in grid\n      let answer = true;\n\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (newMap[i][j] === 0) {\n            answer = false;\n          } else {\n            continue;\n          }\n        } // end for w/ j\n\n      } //end for w/ i\n\n\n      return answer;\n    };\n\n    this.printMap = () => {\n      //prints the current state and the possible answers if any cells are unfilled\n      console.log(this.state.map);\n      let allposibilities = this.closerLook(this.state.map);\n      console.log(allposibilities);\n    };\n\n    this.alreadyContain = (element, array) => {\n      //looks for a particular element in an array, returns true if it's there\n      let answer = false;\n\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] === element) {\n          answer = true;\n        }\n      } //end for\n\n\n      return answer;\n    };\n\n    this.horizontalMatch = (originalPo, i, j, allpossibilities, newMap) => {\n      let x = Math.trunc(i / 3) * 3;\n      let y = Math.trunc(j / 3) * 3;\n\n      for (let column = y; column !== y + 3; column++) {\n        if (j === column) {\n          //if cell is the same\n          continue;\n        } else if (allpossibilities[i][column][1] === 0) {\n          //if cell has zero possibilities... aka already filled\n          continue;\n        } else {\n          //confirmed the comparing cell is empty and not the same as cell [i][j]\n          for (let count1 = 0; count1 < originalPo.length; count1++) {\n            let setValue = [];\n\n            if (this.alreadyContain(originalPo[count1], allpossibilities[i][column][1]) !== true) {\n              continue;\n            } else {\n              //check to make sure no indices not in this vertical (j) have this particular possibility\n              for (let count2 = y; count2 !== y + 3; count2++) {\n                for (let count3 = x; count3 !== x + 3; count3++) {\n                  if (count3 === i) {\n                    // don't look in the same column to determine if to eliminate\n                    continue;\n                  }\n\n                  if (allpossibilities[count2][count3][1] === 0) {\n                    // don't look at already filled cells to determine if to eliminate\n                    continue;\n                  }\n\n                  if (this.alreadyContain(originalPo[count1], allpossibilities[count2][count3][1]) === true) {\n                    setValue.push(originalPo[count1]);\n                  }\n                } // end for w/ count3\n\n              } // end for w/ count2\n\n            }\n\n            if (this.alreadyContain(originalPo[count1], setValue) === false) {\n              let iterate = 0;\n\n              while (iterate !== 9) {\n                if (this.alreadyContain(originalPo[count1], allpossibilities[i][iterate][1]) === true) {\n                  if (iterate !== y && iterate !== y + 1 && iterate !== y + 2) {\n                    //remove originalPo[count1] from allpossibilities[iterate][j][1]\n                    let remove = allpossibilities[i][iterate][1].indexOf(originalPo[count1]);\n\n                    if (remove > -1) {\n                      allpossibilities[i][iterate][1].splice(remove, 1);\n                      console.log(\"Horizontal Match found at \" + i + \" \" + j + \" to reduce possibilities at \" + i + \" \" + iterate + \" to be \" + allpossibilities[i][iterate][1]);\n                    }\n\n                    if (allpossibilities[i][iterate][1].length === 1) {\n                      newMap[i][iterate] = allpossibilities[i][iterate][1][0];\n                      console.log(\"Horizontal Match found \" + i + \" \" + iterate + \" to be \" + allpossibilities[i][iterate][1][0]);\n                    }\n                  }\n                }\n\n                iterate++;\n              } //iterate through column (j) and eliminate content from other possibility arrays\n\n            }\n          } // end for w/ count1\n\n        }\n      } //end for w/ column\n\n\n      return allpossibilities; //return the row if there is a vertical match (new i)\n    };\n\n    this.verticalMatch = (originalPo, i, j, allpossibilities, newMap) => {\n      let x = Math.trunc(i / 3) * 3;\n      let y = Math.trunc(j / 3) * 3;\n\n      for (let row = x; row !== x + 3; row++) {\n        if (i === row) {\n          //if cell is the same\n          continue;\n        } else if (allpossibilities[row][j][1] === 0) {\n          //if cell has zero possibilities... aka already filled\n          continue;\n        } else {\n          //confirmed the comparing cell is empty and not the same as cell [i][j]\n          for (let count1 = 0; count1 < originalPo.length; count1++) {\n            let setValue = [];\n\n            if (this.alreadyContain(originalPo[count1], allpossibilities[row][j][1]) !== true) {\n              continue;\n            } else {\n              //check to make sure no indices not in this vertical (j) have this particular possibility\n              for (let count2 = x; count2 !== x + 3; count2++) {\n                for (let count3 = y; count3 !== y + 3; count3++) {\n                  if (count3 === j) {\n                    // don't look in the same column to determine if to eliminate\n                    continue;\n                  }\n\n                  if (allpossibilities[count2][count3][1] === 0) {\n                    // don't look at already filled cells to determine if to eliminate\n                    continue;\n                  }\n\n                  if (this.alreadyContain(originalPo[count1], allpossibilities[count2][count3][1]) === true) {\n                    setValue.push(originalPo[count1]);\n                  }\n                } //end for w/ count3\n\n              } // end for w/ count2\n\n            }\n\n            if (this.alreadyContain(originalPo[count1], setValue) === false) {\n              let iterate = 0;\n\n              while (iterate !== 9) {\n                if (this.alreadyContain(originalPo[count1], allpossibilities[iterate][j][1]) === true) {\n                  if (iterate !== x && iterate !== x + 1 && iterate !== x + 2) {\n                    //remove originalPo[count1] from allpossibilities[iterate][j][1]\n                    let remove = allpossibilities[iterate][j][1].indexOf(originalPo[count1]);\n\n                    if (remove > -1) {\n                      allpossibilities[iterate][j][1].splice(remove, 1);\n                      console.log(\"Vertical Match found at \" + i + \" \" + j + \" to reduce possibilities at \" + iterate + \" \" + j + \" to be \" + allpossibilities[iterate][j][1]);\n                    }\n\n                    if (allpossibilities[iterate][j][1].length === 1) {\n                      newMap[iterate][j] = allpossibilities[iterate][j][1][0];\n                      console.log(\"Vertical Match found \" + iterate + \" \" + j + \" to be \" + allpossibilities[iterate][j][1][0]);\n                      console.log(allpossibilities);\n                    }\n                  }\n                }\n\n                iterate++;\n              } //iterate through column (j) and eliminate content from other possibility arrays\n\n            }\n          } // end for w/ count1\n\n        }\n      } //end for w/ row\n\n\n      return allpossibilities; //return the row if there is a vertical match (new i)\n    };\n\n    this.oneRule = (newMap, i, j) => {\n      let possible = [];\n\n      for (let solution = 1; solution !== 10; solution++) {\n        //            console.log(\"possible array contains \" + possible);\n        let column = 0;\n        let row = 0;\n        let isProper = true;\n\n        while (column !== 9) {\n          //check if current column contains number already\n          if (newMap[i][column] === solution) {\n            isProper = false;\n            break;\n          } else if (isProper === false) {\n            break;\n          }\n\n          column++;\n        } //end while w/ column\n\n\n        while (row !== 9) {\n          if (newMap[row][j] === solution) {\n            isProper = false;\n            break;\n          } else if (isProper === false) {\n            break;\n          }\n\n          row++;\n        } //end while w/ row\n\n\n        let x = Math.trunc(i / 3) * 3;\n\n        for (let counter1 = x; counter1 !== x + 3; counter1++) {\n          let y = Math.trunc(j / 3) * 3;\n\n          for (let counter2 = y; counter2 !== y + 3; counter2++) {\n            if (newMap[counter1][counter2] === solution) {\n              isProper = false;\n              break;\n            }\n          } //end for w/ counter2\n\n\n          if (isProper === false) {\n            break;\n          }\n        } //end for w/ counter1 \n\n\n        if (isProper !== false) {\n          possible.push(solution);\n        }\n      } //end for w/ solution     \n\n\n      return possible;\n    };\n\n    this.deduction = (newMap, i, j, possible) => {\n      let oldarray = [];\n      let x = Math.trunc(i / 3) * 3;\n\n      for (let counter1 = x; counter1 !== x + 3; counter1++) {\n        let y = Math.trunc(j / 3) * 3;\n\n        for (let counter2 = y; counter2 !== y + 3; counter2++) {\n          if (newMap[counter1][counter2] !== 0) {\n            continue;\n          } else if (counter1 === i && counter2 === j) {\n            continue;\n          } else {\n            let newarray = this.oneRule(newMap, counter1, counter2);\n            oldarray = newarray.concat(oldarray);\n          }\n        }\n      }\n\n      for (let value1 = 0; value1 < possible.length; value1++) {\n        //iterating through what possibilities are in either array\n        for (let value2 = 0; value2 < oldarray.length; value2++) {\n          if (possible[value1] === oldarray[value2]) {\n            break;\n          }\n\n          if (possible[value1] !== oldarray[value2] && value2 === oldarray.length - 1) {\n            return possible[value1]; //if given index value has one differing value, it is the only possible value\n          }\n        }\n      }\n\n      return 0; //placeholder\n    };\n\n    this.closerLook = newMap => {\n      let allpossibilities = [];\n\n      for (let i = 0; i < newMap.length; i++) {\n        allpossibilities[i] = new Array();\n\n        for (let j = 0; j < newMap.length; j++) {\n          allpossibilities[i][j] = new Array();\n\n          if (newMap[i][j] === 0) {\n            allpossibilities[i][j][0] = 0; //found a cell not filled\n\n            allpossibilities[i][j][1] = this.oneRule(newMap, i, j); //call oneRule\n          } else {\n            allpossibilities[i][j][0] = newMap[i][j]; //cell already filled\n\n            allpossibilities[i][j][1] = 0; //zero possibilities\n          }\n        }\n      }\n\n      return allpossibilities;\n    };\n\n    this.reducePossibilities = (allpossibilities, newMap) => {\n      for (let i = 0; i < allpossibilities.length; i++) {\n        for (let j = 0; j < allpossibilities[i].length; j++) {\n          if (allpossibilities[i][j][0] === 0) {\n            //identifies cell to be checked if it is empty\n            //look at indexes directly above, below, left and right for a similar possibility\n            let originalPo = allpossibilities[i][j][1]; //                    allpossibilities = this.verticalMatch(originalPo, i, j, allpossibilities, newMap); //look for vertical matches\n\n            allpossibilities = this.horizontalMatch(originalPo, i, j, allpossibilities, newMap); //look for horizontal matches\n            //                    allpossibilities = this.closerLook(newMap);\n          } else {\n            continue;\n          }\n        }\n      }\n\n      return newMap;\n    };\n\n    this.solve = () => {\n      let newMap = this.state.map.slice();\n      let change = !this.isfinished(newMap);\n      let waschanged = false; //variable change will allow at least 10 cycles to execute and beyond if cells continue to be changed\n      //double for-loop iterates through matrix checking for empty spaces\n\n      for (let i = 0; i < 9; i++) {\n        for (let j = 0; j < 9; j++) {\n          if (newMap[i][j] === 0) {\n            //if cell is empty, put correct answer in\n            let possible = this.oneRule(newMap, i, j); //set possible to the total possible number that could fit in this cell\n\n            if (possible.length === 1) {\n              // if there is only one possibiliyt set it\n              waschanged = true;\n              newMap[i][j] = possible[0];\n              console.log(\"One Rule Found at \" + i + \" \" + j + \" to be \" + possible[0]);\n            } else if (possible.length === 0) {\n              //any empty cell should always have some list of possible numbers\n              alert(\"Unsolvable\");\n              return;\n            } else if (possible.length > 1) {\n              let temp = this.deduction(newMap, i, j, possible);\n\n              if (temp !== 0) {\n                waschanged = true;\n                console.log(\"Deduction Found at \" + i + \" \" + j + \" to be \" + temp);\n                newMap[i][j] = temp;\n              }\n            } else {\n              if (this.state.cycleCount < 11) {\n                waschanged = true;\n              }\n\n              continue;\n            }\n          }\n        }\n      }\n\n      this.setState({\n        map: newMap\n      });\n      change = !this.isfinished(newMap);\n\n      if (waschanged === true && change === true) {\n        this.setState({\n          cycleCount: 0\n        }); //this.state.cycleCount = 0;\n\n        this.solve();\n      } else if (change === true && this.state.cycleCount < 3 && waschanged === false) {\n        this.state.cycleCount += 1;\n        console.log(\"cycleCount increased = \" + this.state.cycleCount);\n        this.solve();\n      } else if (change === true && waschanged === false && this.state.cycleCount >= 3) {\n        console.log(\"Initiating closer look\");\n        let allpossibilities = this.closerLook(newMap); //console.log(allpossibilities);\n\n        newMap = this.reducePossibilities(allpossibilities, newMap);\n        this.setState({\n          map: newMap\n        });\n        return;\n      } else if (change === false) {\n        console.log(\"Solved \");\n        return;\n      }\n    };\n\n    this.state = {\n      map: [[1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], //top 3 blocks ([0][0-8] thru [2][0-8])\n      [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], //middle 3 blocks ([3][0-8] thru [5][0-8])\n      [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]],\n      //bottom 3 blocks ([6][0-8] thru [8][0-8])\n      cycleCount: 0\n    };\n  } //end constructor\n\n\n  //<input onChange = {this.handleInput} placeholder=\"Enter Number\"></input>\n  //<button onClick={this.logValue}>Log value</button>\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 21\n      }\n    }, \"Sudoku Solver\")), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 0, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[0][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 1, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[1][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 2, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[2][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 3, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[3][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 4, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[4][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 5, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[5][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 6, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[6][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 7, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[7][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 0),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 1),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 2),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 3),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 4),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 5),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 6),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][6],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 7),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][7],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 22\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onInput: ev => this.handleInput(ev, 8, 8),\n      maxLength: \"1\",\n      placeholder: this.state.map[8][8],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 22\n      }\n    }), \" \")), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.solve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 21\n      }\n    }, \" Solve \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 69\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 74\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.printMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 21\n      }\n    }, \" Print to Console \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 83\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.resetTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 21\n      }\n    }, \" Reset Test \"))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Steven/Desktop/Workplace/sudoku/sudoku/src/Tabs/home.js"],"names":["React","Component","ReactDOM","Home","constructor","props","resetTest","test","setState","cycleCount","newMap","map","console","log","handleInput","event","index1","index2","isNaN","target","value","alert","state","slice","Number","printMap","isfinished","answer","i","j","allposibilities","closerLook","alreadyContain","element","array","length","horizontalMatch","originalPo","allpossibilities","x","Math","trunc","y","column","count1","setValue","count2","count3","push","iterate","remove","indexOf","splice","verticalMatch","row","oneRule","possible","solution","isProper","counter1","counter2","deduction","oldarray","newarray","concat","value1","value2","Array","reducePossibilities","solve","change","waschanged","temp","render","ev"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport '../App.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            map :   [[1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1],//top 3 blocks ([0][0-8] thru [2][0-8])\r\n                     \r\n                     [1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1],//middle 3 blocks ([3][0-8] thru [5][0-8])\r\n\r\n                     [1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1],\r\n                     [1,1,1,    1,1,1,   1,1,1]],//bottom 3 blocks ([6][0-8] thru [8][0-8])\r\n\r\n            cycleCount: 0\r\n        };\r\n    } //end constructor\r\n\r\n    resetTest = () => {\r\n\r\n        /*let test = [[3,5,9,    8,0,0,   0,0,0],\r\n                    [0,0,0,    0,4,0,   0,0,0],\r\n                    [0,0,0,    0,0,0,   0,7,9],\r\n        \r\n                    [0,6,0,    4,0,0,   0,0,0],\r\n                    [0,0,0,    0,0,0,   0,0,8],\r\n                    [0,3,0,    2,6,0,   0,0,0],\r\n\r\n                    [0,0,8,    3,0,9,   2,0,7],\r\n                    [0,0,0,    0,0,8,   5,0,0],\r\n                    [0,0,1,    0,0,0,   6,0,0]];*/\r\n\r\n        let test = [[0,9,0,    4,7,0,   0,0,0],\r\n                    [0,0,3,    0,5,0,   0,0,7],\r\n                    [0,5,1,    0,0,6,   0,0,0],\r\n        \r\n                    [0,0,0,    9,8,3,   0,0,0],\r\n                    [0,0,0,    0,0,0,   0,2,6],\r\n                    [3,0,0,    0,0,0,   0,7,0],\r\n\r\n                    [0,0,6,    0,0,0,   0,0,0],\r\n                    [0,4,0,    0,0,5,   9,0,0],\r\n                    [0,0,0,    3,0,1,   5,0,0]];\r\n\r\n        this.setState({cycleCount : 0});\r\n        //this.state.cycleCount = 0;\r\n        let newMap = test;\r\n        this.setState({map: newMap});\r\n        console.log(newMap);\r\n    } //end of resetTest\r\n\r\n    handleInput = (event, index1, index2) =>{\r\n       \r\n        if(isNaN(event.target.value)){\r\n            alert(\"Sudoku only uses numbers\");\r\n        }\r\n        else{\r\n\r\n            let newMap = this.state.map.slice();\r\n            newMap[index1][index2] = Number(event.target.value);\r\n            this.setState({ map: newMap});\r\n            \r\n            this.printMap();  \r\n        }      \r\n    }// end of handleInput\r\n\r\n    isfinished = (newMap) => {  //returns true if puzzle is finished, else false... ie checks for any values of 0 in grid\r\n        let answer = true;\r\n        for(let i = 0; i < 9; i++){\r\n            for(let j = 0; j < 9; j++){\r\n                if(newMap[i][j] === 0){\r\n                    answer = false;\r\n                }\r\n                else{\r\n                    continue;\r\n                }\r\n            }// end for w/ j\r\n        }//end for w/ i\r\n        return answer;\r\n    }// end of isFinished\r\n\r\n    printMap = () => {  //prints the current state and the possible answers if any cells are unfilled\r\n        console.log(this.state.map);\r\n        let allposibilities = this.closerLook(this.state.map);\r\n        console.log(allposibilities);\r\n    }//end of printMap\r\n\r\n    alreadyContain = (element, array) => {  //looks for a particular element in an array, returns true if it's there\r\n        let answer = false;\r\n        for (let i = 0; i < array.length; i++){\r\n            if (array[i] === element){\r\n                answer = true;\r\n            }\r\n        }//end for\r\n        return answer;\r\n    }//end of alreadyContain\r\n\r\n    horizontalMatch = (originalPo, i, j, allpossibilities, newMap) => {\r\n        let x = (Math.trunc(i/3))*3;\r\n        let y = (Math.trunc(j/3))*3;\r\n        for (let column = y; column !== y+3; column++){\r\n            if (j === column){  //if cell is the same\r\n                continue;\r\n            }\r\n            else if (allpossibilities[i][column][1] === 0){ //if cell has zero possibilities... aka already filled\r\n                continue;\r\n            }\r\n            else {      //confirmed the comparing cell is empty and not the same as cell [i][j]\r\n                for (let count1 = 0; count1 < originalPo.length; count1++){\r\n                    let setValue = [];\r\n                    if(this.alreadyContain(originalPo[count1], allpossibilities[i][column][1]) !== true){\r\n                        continue;\r\n                    }\r\n                    else{\r\n                        //check to make sure no indices not in this vertical (j) have this particular possibility\r\n                        for (let count2 = y; count2 !== y+3; count2++){\r\n                            for (let count3 = x; count3 !== x+3; count3++){\r\n                                if(count3 === i){ // don't look in the same column to determine if to eliminate\r\n                                    continue;\r\n                                }\r\n                                if(allpossibilities[count2][count3][1] === 0){   // don't look at already filled cells to determine if to eliminate\r\n                                    continue;\r\n                                }\r\n                                if(this.alreadyContain(originalPo[count1], allpossibilities[count2][count3][1]) === true){ \r\n                                    setValue.push(originalPo[count1]);\r\n                                }\r\n                                \r\n                            }// end for w/ count3\r\n                        }// end for w/ count2\r\n                    }\r\n                    if(this.alreadyContain(originalPo[count1], setValue) === false){\r\n                        let iterate = 0;\r\n                        while(iterate !== 9){\r\n                            if(this.alreadyContain(originalPo[count1], allpossibilities[i][iterate][1]) === true){\r\n                                if(iterate !== y && iterate !== y+1 && iterate !== y+2){\r\n                                    //remove originalPo[count1] from allpossibilities[iterate][j][1]\r\n                                    let remove = allpossibilities[i][iterate][1].indexOf(originalPo[count1]);\r\n                                    if (remove > -1){\r\n                                        allpossibilities[i][iterate][1].splice(remove, 1);\r\n                                        console.log(\"Horizontal Match found at \" + i + \" \" + j + \" to reduce possibilities at \" + i + \" \" + iterate + \" to be \" + allpossibilities[i][iterate][1]);\r\n                                    }\r\n                                    if (allpossibilities[i][iterate][1].length === 1){\r\n                                        newMap[i][iterate] = allpossibilities[i][iterate][1][0];\r\n                                        console.log(\"Horizontal Match found \" + i + \" \" + iterate + \" to be \" + allpossibilities[i][iterate][1][0]);\r\n                                    }\r\n                                }\r\n                            }\r\n                            iterate++;\r\n                        }\r\n                        //iterate through column (j) and eliminate content from other possibility arrays\r\n\r\n\r\n                    }\r\n                    \r\n                }// end for w/ count1\r\n\r\n            }\r\n        \r\n\r\n        }//end for w/ column\r\n        return allpossibilities; //return the row if there is a vertical match (new i)\r\n    }// end of horizontalMatch\r\n\r\n    verticalMatch = (originalPo, i, j, allpossibilities, newMap) => {\r\n        let x = (Math.trunc(i/3))*3;\r\n        let y = (Math.trunc(j/3))*3;\r\n        for (let row = x; row !== x+3; row++){\r\n            if (i === row){  //if cell is the same\r\n                continue;\r\n            }\r\n            else if (allpossibilities[row][j][1] === 0){ //if cell has zero possibilities... aka already filled\r\n                continue;\r\n            }\r\n            else {      //confirmed the comparing cell is empty and not the same as cell [i][j]\r\n                for (let count1 = 0; count1 < originalPo.length; count1++){\r\n                    let setValue = [];\r\n                    if(this.alreadyContain(originalPo[count1], allpossibilities[row][j][1]) !== true){\r\n                        continue;\r\n                    }\r\n                    else{\r\n                        //check to make sure no indices not in this vertical (j) have this particular possibility\r\n                        for (let count2 = x; count2 !== x+3; count2++){\r\n                            for (let count3 = y; count3 !== y+3; count3++){\r\n                                if(count3 === j){ // don't look in the same column to determine if to eliminate\r\n                                    continue;\r\n                                }\r\n                                if(allpossibilities[count2][count3][1] === 0){   // don't look at already filled cells to determine if to eliminate\r\n                                    continue;\r\n                                }\r\n                                if(this.alreadyContain(originalPo[count1], allpossibilities[count2][count3][1]) === true){ \r\n                                    setValue.push(originalPo[count1]);\r\n                                }\r\n                                \r\n                            } //end for w/ count3\r\n                        }// end for w/ count2\r\n                    }\r\n                    if(this.alreadyContain(originalPo[count1], setValue) === false){\r\n                        let iterate = 0;\r\n                        while(iterate !== 9){\r\n                            if(this.alreadyContain(originalPo[count1], allpossibilities[iterate][j][1]) === true){\r\n                                if(iterate !== x && iterate !== x+1 && iterate !== x+2){\r\n                                    //remove originalPo[count1] from allpossibilities[iterate][j][1]\r\n                                    let remove = allpossibilities[iterate][j][1].indexOf(originalPo[count1]);\r\n                                    if (remove > -1){\r\n                                        allpossibilities[iterate][j][1].splice(remove, 1);\r\n                                        console.log(\"Vertical Match found at \" + i + \" \" + j + \" to reduce possibilities at \" + iterate + \" \" + j + \" to be \" + allpossibilities[iterate][j][1]);\r\n                                    }\r\n                                    if (allpossibilities[iterate][j][1].length === 1){\r\n                                        newMap[iterate][j] = allpossibilities[iterate][j][1][0];\r\n                                        console.log(\"Vertical Match found \" + iterate + \" \" + j + \" to be \" + allpossibilities[iterate][j][1][0]);\r\n                                        console.log(allpossibilities);\r\n                                    }\r\n                                }\r\n                            }\r\n                            iterate++;\r\n                        }\r\n                        //iterate through column (j) and eliminate content from other possibility arrays\r\n\r\n\r\n                    }\r\n                    \r\n                }// end for w/ count1\r\n\r\n            }\r\n\r\n        }//end for w/ row\r\n        return allpossibilities; //return the row if there is a vertical match (new i)\r\n    }//end verticalMatch\r\n\r\n    \r\n    //given a grid, and a set of coords returns a guaranteed answer or leaves space blank\r\n    //oneRule checks vertical, horizontal and 3x3 and holds an array of possibilites based on what it finds...\r\n    //if there is only possibilty it pushes that answer into the cell\r\n    oneRule = (newMap, i, j) => {    \r\n        let possible = [];\r\n        for(let solution = 1; solution !== 10; solution++){\r\n//            console.log(\"possible array contains \" + possible);\r\n            let column = 0;\r\n            let row = 0;\r\n            let isProper = true;\r\n            \r\n\r\n            while (column !== 9){               //check if current column contains number already\r\n                if (newMap[i][column] === solution){\r\n                    isProper = false;\r\n                    break;\r\n                }\r\n                else if (isProper === false){\r\n                    break;\r\n                }\r\n                column++;\r\n            }  //end while w/ column\r\n\r\n            while (row !== 9){\r\n                if(newMap[row][j] === solution){\r\n                    isProper = false;\r\n                    break;\r\n                }\r\n                else if(isProper === false){\r\n                    break;\r\n                }\r\n                row++;\r\n            }  //end while w/ row\r\n                \r\n            let x = (Math.trunc(i/3))*3;\r\n            for (let counter1 = x; counter1 !== x+3; counter1++){\r\n                let y = (Math.trunc(j/3))*3;\r\n                for(let counter2 = y; counter2 !== y+3; counter2++){\r\n                    if (newMap[counter1][counter2] === solution){\r\n                        isProper = false; \r\n                        break;\r\n                    }\r\n                }//end for w/ counter2\r\n                if (isProper === false){\r\n                    break;\r\n                }\r\n            }  //end for w/ counter1 \r\n            \r\n            if(isProper !== false){\r\n                possible.push(solution);\r\n            }\r\n          \r\n        }   //end for w/ solution     \r\n            return possible;       \r\n        \r\n    }   //end oneRule\r\n\r\n    //scan other empty cells in 3x3 to determine if current cell is the only possible fit for a number\r\n    deduction = (newMap, i, j, possible) => {\r\n        let oldarray = [];\r\n        let x = (Math.trunc(i/3))*3;\r\n            for (let counter1 = x; counter1 !== x+3; counter1++){\r\n                let y = (Math.trunc(j/3))*3;\r\n                for(let counter2 = y; counter2 !== y+3; counter2++){\r\n                   \r\n                    if (newMap[counter1][counter2] !== 0){\r\n                        continue;\r\n                    }\r\n                    else if(counter1 === i && counter2 === j){\r\n                        continue;\r\n                    }\r\n                    else {               \r\n                        let newarray = this.oneRule(newMap, counter1, counter2);\r\n                        oldarray = newarray.concat(oldarray);\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        for(let value1 = 0; value1 < possible.length; value1++){    //iterating through what possibilities are in either array\r\n            for(let value2 = 0; value2 < oldarray.length; value2++){\r\n                if(possible[value1] === oldarray[value2]){\r\n                    break;\r\n                }\r\n                if(possible[value1] !== oldarray[value2] && value2 === oldarray.length - 1){\r\n                    return possible[value1];                        //if given index value has one differing value, it is the only possible value\r\n                }\r\n            }\r\n        }\r\n        return 0; //placeholder\r\n    }\r\n\r\n//similar to penciling in the possible solutions in the corner of a cell\r\n//creates 3d array called allpossibilities... i = rows, j = columns and \r\n//the next number determines if you want the cell's contents or possibilities\r\n//allposibilities[i][j][0] = a cell's existing number or a zero... not an array\r\n//allposibilities[i][j][1] = a zero or an array of the possibilities this cell has... \r\n//if the cell is empty it goes through oneRule to get this array\r\n    closerLook = (newMap) => {\r\n        let allpossibilities = [];\r\n\r\n            for(let i = 0; i < newMap.length; i++){\r\n                allpossibilities[i] = new Array();\r\n                for (let j = 0; j < newMap.length; j++){\r\n                    allpossibilities[i][j] = new Array();\r\n                    if(newMap[i][j] === 0){\r\n                        allpossibilities[i][j][0] = 0;  //found a cell not filled\r\n                        allpossibilities[i][j][1] = this.oneRule(newMap, i, j); //call oneRule\r\n                    }\r\n                    else{\r\n                        allpossibilities[i][j][0] = newMap[i][j];   //cell already filled\r\n                        allpossibilities[i][j][1] = 0;  //zero possibilities\r\n                    }\r\n                }\r\n            }\r\n\r\n        return allpossibilities;\r\n\r\n    }\r\n\r\n    reducePossibilities = (allpossibilities, newMap) => {\r\n       \r\n        for (let i = 0; i < allpossibilities.length; i++){\r\n            for (let j = 0; j < allpossibilities[i].length; j++){\r\n                if(allpossibilities[i][j][0] === 0){             //identifies cell to be checked if it is empty\r\n                   //look at indexes directly above, below, left and right for a similar possibility\r\n                    let originalPo = allpossibilities[i][j][1];               \r\n//                    allpossibilities = this.verticalMatch(originalPo, i, j, allpossibilities, newMap); //look for vertical matches\r\n\r\n                    allpossibilities = this.horizontalMatch(originalPo, i, j, allpossibilities, newMap); //look for horizontal matches\r\n//                    allpossibilities = this.closerLook(newMap);\r\n                }\r\n                else{\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n\r\n        return newMap;\r\n    }\r\n\r\n    solve = () => {       \r\n        let newMap = this.state.map.slice();\r\n        let change = !this.isfinished(newMap);\r\n        let waschanged = false;  //variable change will allow at least 10 cycles to execute and beyond if cells continue to be changed\r\n        //double for-loop iterates through matrix checking for empty spaces\r\n\r\n            for(let i = 0; i < 9; i++){\r\n                for(let j = 0; j < 9; j++){\r\n                    if(newMap[i][j] === 0){      //if cell is empty, put correct answer in\r\n                        \r\n                        let possible = this.oneRule(newMap, i, j); //set possible to the total possible number that could fit in this cell\r\n                        if (possible.length === 1){ // if there is only one possibiliyt set it\r\n                            waschanged = true;\r\n                            newMap[i][j] = possible[0];\r\n                            console.log(\"One Rule Found at \" + i + \" \" + j + \" to be \" + possible[0]);\r\n                        }\r\n                        else if (possible.length === 0){ //any empty cell should always have some list of possible numbers\r\n                            alert(\"Unsolvable\");\r\n                            return;\r\n                        }\r\n                        else if (possible.length > 1){\r\n                            let temp = this.deduction(newMap, i, j, possible);\r\n                            if(temp !== 0){\r\n                                waschanged = true;                               \r\n                                console.log(\"Deduction Found at \" + i + \" \" + j + \" to be \" + temp);\r\n                                newMap[i][j] = temp;\r\n                            }                    \r\n                            \r\n                        }\r\n                        else{\r\n                            if(this.state.cycleCount < 11){\r\n                                waschanged = true;\r\n                            }\r\n                            continue;\r\n                        }\r\n                            \r\n                    }\r\n                }\r\n            }\r\n        \r\n\r\n        this.setState({map : newMap});\r\n        change = !this.isfinished(newMap);\r\n        if(waschanged === true && change === true ){\r\n            this.setState({cycleCount: 0});\r\n            //this.state.cycleCount = 0;\r\n            this.solve();\r\n        }\r\n        else if (change === true && this.state.cycleCount < 3 && waschanged === false){\r\n            this.state.cycleCount += 1;\r\n            console.log(\"cycleCount increased = \" + this.state.cycleCount);\r\n            this.solve();\r\n        }\r\n        else if (change === true && waschanged === false && this.state.cycleCount >= 3){\r\n            console.log(\"Initiating closer look\");\r\n            let allpossibilities = this.closerLook(newMap);\r\n            //console.log(allpossibilities);\r\n            newMap = this.reducePossibilities(allpossibilities, newMap);\r\n            this.setState({map: newMap});\r\n            return;\r\n        }\r\n        else if (change === false){\r\n            console.log(\"Solved \");\r\n            return;\r\n        }\r\n    }\r\n\r\n    \r\n    //<input onChange = {this.handleInput} placeholder=\"Enter Number\"></input>\r\n    //<button onClick={this.logValue}>Log value</button>\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div id=\"title\">\r\n                    <div className = \"head\">\r\n                        Sudoku Solver\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n\r\n            <table>\r\n            \r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 0)} maxLength = \"1\" placeholder = {this.state.map[0][0]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 1)} maxLength = \"1\" placeholder = {this.state.map[0][1]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 2)} maxLength = \"1\" placeholder = {this.state.map[0][2]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 3)} maxLength = \"1\" placeholder = {this.state.map[0][3]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 4)} maxLength = \"1\" placeholder = {this.state.map[0][4]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 5)} maxLength = \"1\" placeholder = {this.state.map[0][5]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 6)} maxLength = \"1\" placeholder = {this.state.map[0][6]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 7)} maxLength = \"1\" placeholder = {this.state.map[0][7]} /> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 0, 8)} maxLength = \"1\" placeholder = {this.state.map[0][8]} /> </td>\r\n                </tr>\r\n                  \r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 0)} maxLength = \"1\" placeholder = {this.state.map[1][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 1)} maxLength = \"1\" placeholder = {this.state.map[1][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 2)} maxLength = \"1\" placeholder = {this.state.map[1][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 3)} maxLength = \"1\" placeholder = {this.state.map[1][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 4)} maxLength = \"1\" placeholder = {this.state.map[1][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 5)} maxLength = \"1\" placeholder = {this.state.map[1][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 6)} maxLength = \"1\" placeholder = {this.state.map[1][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 7)} maxLength = \"1\" placeholder = {this.state.map[1][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 1, 8)} maxLength = \"1\" placeholder = {this.state.map[1][8]}/> </td>\r\n                </tr>\r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 0)} maxLength = \"1\" placeholder = {this.state.map[2][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 1)} maxLength = \"1\" placeholder = {this.state.map[2][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 2)} maxLength = \"1\" placeholder = {this.state.map[2][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 3)} maxLength = \"1\" placeholder = {this.state.map[2][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 4)} maxLength = \"1\" placeholder = {this.state.map[2][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 5)} maxLength = \"1\" placeholder = {this.state.map[2][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 6)} maxLength = \"1\" placeholder = {this.state.map[2][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 7)} maxLength = \"1\" placeholder = {this.state.map[2][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 2, 8)} maxLength = \"1\" placeholder = {this.state.map[2][8]}/> </td>\r\n                </tr>\r\n                  \r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 0)} maxLength = \"1\" placeholder = {this.state.map[3][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 1)} maxLength = \"1\" placeholder = {this.state.map[3][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 2)} maxLength = \"1\" placeholder = {this.state.map[3][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 3)} maxLength = \"1\" placeholder = {this.state.map[3][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 4)} maxLength = \"1\" placeholder = {this.state.map[3][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 5)} maxLength = \"1\" placeholder = {this.state.map[3][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 6)} maxLength = \"1\" placeholder = {this.state.map[3][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 7)} maxLength = \"1\" placeholder = {this.state.map[3][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 3, 8)} maxLength = \"1\" placeholder = {this.state.map[3][8]}/> </td>\r\n                </tr>\r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 0)} maxLength = \"1\" placeholder = {this.state.map[4][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 1)} maxLength = \"1\" placeholder = {this.state.map[4][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 2)} maxLength = \"1\" placeholder = {this.state.map[4][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 3)} maxLength = \"1\" placeholder = {this.state.map[4][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 4)} maxLength = \"1\" placeholder = {this.state.map[4][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 5)} maxLength = \"1\" placeholder = {this.state.map[4][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 6)} maxLength = \"1\" placeholder = {this.state.map[4][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 7)} maxLength = \"1\" placeholder = {this.state.map[4][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 4, 8)} maxLength = \"1\" placeholder = {this.state.map[4][8]}/> </td>\r\n                </tr>\r\n                  \r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 0)} maxLength = \"1\" placeholder = {this.state.map[5][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 1)} maxLength = \"1\" placeholder = {this.state.map[5][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 2)} maxLength = \"1\" placeholder = {this.state.map[5][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 3)} maxLength = \"1\" placeholder = {this.state.map[5][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 4)} maxLength = \"1\" placeholder = {this.state.map[5][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 5)} maxLength = \"1\" placeholder = {this.state.map[5][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 6)} maxLength = \"1\" placeholder = {this.state.map[5][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 7)} maxLength = \"1\" placeholder = {this.state.map[5][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 5, 8)} maxLength = \"1\" placeholder = {this.state.map[5][8]}/> </td>\r\n                </tr>\r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 0)} maxLength = \"1\" placeholder = {this.state.map[6][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 1)} maxLength = \"1\" placeholder = {this.state.map[6][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 2)} maxLength = \"1\" placeholder = {this.state.map[6][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 3)} maxLength = \"1\" placeholder = {this.state.map[6][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 4)} maxLength = \"1\" placeholder = {this.state.map[6][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 5)} maxLength = \"1\" placeholder = {this.state.map[6][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 6)} maxLength = \"1\" placeholder = {this.state.map[6][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 7)} maxLength = \"1\" placeholder = {this.state.map[6][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 6, 8)} maxLength = \"1\" placeholder = {this.state.map[6][8]}/> </td>\r\n                </tr>\r\n                  \r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 0)} maxLength = \"1\" placeholder = {this.state.map[7][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 1)} maxLength = \"1\" placeholder = {this.state.map[7][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 2)} maxLength = \"1\" placeholder = {this.state.map[7][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 3)} maxLength = \"1\" placeholder = {this.state.map[7][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 4)} maxLength = \"1\" placeholder = {this.state.map[7][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 5)} maxLength = \"1\" placeholder = {this.state.map[7][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 6)} maxLength = \"1\" placeholder = {this.state.map[7][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 7)} maxLength = \"1\" placeholder = {this.state.map[7][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 7, 8)} maxLength = \"1\" placeholder = {this.state.map[7][8]}/> </td>\r\n                </tr>\r\n                <tr>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 0)} maxLength = \"1\" placeholder = {this.state.map[8][0]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 1)} maxLength = \"1\" placeholder = {this.state.map[8][1]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 2)} maxLength = \"1\" placeholder = {this.state.map[8][2]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 3)} maxLength = \"1\" placeholder = {this.state.map[8][3]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 4)} maxLength = \"1\" placeholder = {this.state.map[8][4]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 5)} maxLength = \"1\" placeholder = {this.state.map[8][5]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 6)} maxLength = \"1\" placeholder = {this.state.map[8][6]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 7)} maxLength = \"1\" placeholder = {this.state.map[8][7]}/> </td>\r\n                <td> <input type = \"text\" onInput = {(ev) => this.handleInput(ev, 8, 8)} maxLength = \"1\" placeholder = {this.state.map[8][8]}/> </td>\r\n                </tr>\r\n                <th colSpan=\"9\">\r\n                    <button onClick = {this.solve}> Solve </button> <br/><br/>\r\n                    <button onClick = {this.printMap}> Print to Console </button> <br/>\r\n                    <button onClick = {this.resetTest}> Reset Test </button>\r\n                </th>\r\n                \r\n            </table>\r\n            \r\n            </div>\r\n           \r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}